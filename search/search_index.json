{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Modern Doc Template for your Python Project \ud83d\udc85 This website was build with: mkdocs.org mkdocs-material pymdown Features out of the box amazing good looking website thanks to mkdocs.org and mkdocs-material a wide array of cool features, such as code highlight, admonition, latex rendering and more thanks to pymdown FastApi cool terminal rendering auto documentation for code thanks to mkdocstrings automatic build thanks to github action, see the CI/CD page Getting Started Head over the getting started guide Cool stuff Code Highlights See here for doc print ( \"Hello World!\" ) Admonition See here for doc Hello There General Kenobi! Hello There General Kenobi! Error Boom! Latex See here for doc Inline \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) , \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) . Block \\[ E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j \\] \\[\\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align}\\]","title":"Docs"},{"location":"#a-modern-doc-template-for-your-python-project","text":"This website was build with: mkdocs.org mkdocs-material pymdown","title":"A Modern Doc Template for your Python Project \ud83d\udc85"},{"location":"#features","text":"out of the box amazing good looking website thanks to mkdocs.org and mkdocs-material a wide array of cool features, such as code highlight, admonition, latex rendering and more thanks to pymdown FastApi cool terminal rendering auto documentation for code thanks to mkdocstrings automatic build thanks to github action, see the CI/CD page","title":"Features"},{"location":"#getting-started","text":"Head over the getting started guide","title":"Getting Started"},{"location":"#cool-stuff","text":"","title":"Cool stuff"},{"location":"#code-highlights","text":"See here for doc print ( \"Hello World!\" )","title":"Code Highlights"},{"location":"#admonition","text":"See here for doc Hello There General Kenobi! Hello There General Kenobi! Error Boom!","title":"Admonition"},{"location":"#latex","text":"See here for doc Inline \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) , \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) . Block \\[ E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j \\] \\[\\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align}\\]","title":"Latex"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"getting_started/","text":"$ AutoModel () . from_pretrained ( \"my_name\" ) [ 06 / 21 / 22 18 : 13 : 40 ] WARNING Error ( s ) in loading state_dict for AnyModelForClassification : base . py : 54 Unexpected key ( s ) in state_dict : \"head.fc.weight\" , \"head.fc.bias\" . INFO Loaded pretrained weights for dummy - d0 .","title":"Getting Started"},{"location":"models/vision/classification/dummy/","text":"Dummy model!","title":"Dummy"},{"location":"reference/SUMMARY/","text":"glasses config logger models auto base model_zoo utils vision auto backbones base dummy config model zoo classification base common config model dummy config model zoo heads base linear_head config model outputs necks Neck storage base local tests auto package a model zoo b model zoo test_auto test_auto_utils conftest fixtures types","title":"SUMMARY"},{"location":"reference/logger/","text":"logger = logging . getLogger ( 'glasses' ) module-attribute","title":"logger"},{"location":"reference/logger/#glasses.logger.logger","text":"","title":"logger"},{"location":"reference/types/","text":"StateDict = Dict [ str , Tensor ] module-attribute","title":"types"},{"location":"reference/types/#glasses.types.StateDict","text":"","title":"StateDict"},{"location":"reference/config/","text":"Config dataclass Base class for configurations, all configuration must inherit from this class. Note A Config holds what is needed to create the inputs to your class. It's purely a data container . Thus, it must not have any side effect , any logic that requires the Config values to be somehow processed must be implemented somewhere else. A correct approach is to override the ConfigMixin.from_config method. A custom configuration can be written as follows: from glasses.config import Config @dataclass class MyConfig ( Config ): foo : int baa : str Source code in glasses/config/__init__.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @dataclass class Config : \"\"\" Base class for configurations, all configuration **must** inherit from this class. !!! note A `Config` holds what is needed to create the inputs to your class. It's purely a **data container**. Thus, it **must not have any side effect**, any logic that requires the `Config` values to be somehow processed must be implemented somewhere else. A correct approach is to override the [`ConfigMixin.from_config`](#glasses.config.ConfigMixin.from_config) method. A custom configuration can be written as follows: ```python from glasses.config import Config @dataclass class MyConfig(Config): foo: int baa: str ``` \"\"\" pass def build ( self ) -> nn . Module : raise NotImplemented build () Source code in glasses/config/__init__.py 28 29 def build ( self ) -> nn . Module : raise NotImplemented","title":"config"},{"location":"reference/config/#glasses.config.Config","text":"Base class for configurations, all configuration must inherit from this class. Note A Config holds what is needed to create the inputs to your class. It's purely a data container . Thus, it must not have any side effect , any logic that requires the Config values to be somehow processed must be implemented somewhere else. A correct approach is to override the ConfigMixin.from_config method. A custom configuration can be written as follows: from glasses.config import Config @dataclass class MyConfig ( Config ): foo : int baa : str Source code in glasses/config/__init__.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @dataclass class Config : \"\"\" Base class for configurations, all configuration **must** inherit from this class. !!! note A `Config` holds what is needed to create the inputs to your class. It's purely a **data container**. Thus, it **must not have any side effect**, any logic that requires the `Config` values to be somehow processed must be implemented somewhere else. A correct approach is to override the [`ConfigMixin.from_config`](#glasses.config.ConfigMixin.from_config) method. A custom configuration can be written as follows: ```python from glasses.config import Config @dataclass class MyConfig(Config): foo: int baa: str ``` \"\"\" pass def build ( self ) -> nn . Module : raise NotImplemented","title":"Config"},{"location":"reference/config/#glasses.config.Config.build","text":"Source code in glasses/config/__init__.py 28 29 def build ( self ) -> nn . Module : raise NotImplemented","title":"build()"},{"location":"reference/models/","text":"","title":"Index"},{"location":"reference/models/auto/","text":"","title":"Index"},{"location":"reference/models/auto/base/","text":"AutoModel The base AutoModel class. Usage: auto_model = AutoModel () model = auto_model . from_name ( \"my_name\" ) model = auto_model . from_pretrained ( \"my_name\" ) model = auto_model . from_pretrained ( \"my_name\" , my_config ) Source code in glasses/models/auto/base.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class AutoModel : \"\"\"The base `AutoModel` class. Usage: ```python auto_model = AutoModel() model = auto_model.from_name(\"my_name\") model = auto_model.from_pretrained(\"my_name\") model = auto_model.from_pretrained(\"my_name\", my_config) ``` \"\"\" names_to_configs : Dict [ str , Config ] \"\"\"Holds the map from name to config type\"\"\" @classmethod def get_config_from_name ( cls , name : str ) -> Config : return cls . names_to_configs [ name ] @classmethod def from_name ( cls , name : str ): if name not in cls . names_to_configs : suggestions = difflib . get_close_matches ( name , cls . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = cls . names_to_configs [ name ] return config . build () @classmethod def from_pretrained ( cls , name : str , config : Optional [ Config ] = None , storage : Storage = None ) -> nn . Module : storage = LocalStorage () if storage is None else storage model = cls . from_name ( name ) if config is None else config . build () state_dict , _ = storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config names_to_configs : Dict [ str , Config ] class-attribute Holds the map from name to config type from_name ( name ) classmethod Source code in glasses/models/auto/base.py 30 31 32 33 34 35 36 37 38 39 40 @classmethod def from_name ( cls , name : str ): if name not in cls . names_to_configs : suggestions = difflib . get_close_matches ( name , cls . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = cls . names_to_configs [ name ] return config . build () from_pretrained ( name , config = None , storage = None ) classmethod Source code in glasses/models/auto/base.py 42 43 44 45 46 47 48 49 50 51 52 53 54 @classmethod def from_pretrained ( cls , name : str , config : Optional [ Config ] = None , storage : Storage = None ) -> nn . Module : storage = LocalStorage () if storage is None else storage model = cls . from_name ( name ) if config is None else config . build () state_dict , _ = storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config get_config_from_name ( name ) classmethod Source code in glasses/models/auto/base.py 26 27 28 @classmethod def get_config_from_name ( cls , name : str ) -> Config : return cls . names_to_configs [ name ]","title":"base"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel","text":"The base AutoModel class. Usage: auto_model = AutoModel () model = auto_model . from_name ( \"my_name\" ) model = auto_model . from_pretrained ( \"my_name\" ) model = auto_model . from_pretrained ( \"my_name\" , my_config ) Source code in glasses/models/auto/base.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class AutoModel : \"\"\"The base `AutoModel` class. Usage: ```python auto_model = AutoModel() model = auto_model.from_name(\"my_name\") model = auto_model.from_pretrained(\"my_name\") model = auto_model.from_pretrained(\"my_name\", my_config) ``` \"\"\" names_to_configs : Dict [ str , Config ] \"\"\"Holds the map from name to config type\"\"\" @classmethod def get_config_from_name ( cls , name : str ) -> Config : return cls . names_to_configs [ name ] @classmethod def from_name ( cls , name : str ): if name not in cls . names_to_configs : suggestions = difflib . get_close_matches ( name , cls . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = cls . names_to_configs [ name ] return config . build () @classmethod def from_pretrained ( cls , name : str , config : Optional [ Config ] = None , storage : Storage = None ) -> nn . Module : storage = LocalStorage () if storage is None else storage model = cls . from_name ( name ) if config is None else config . build () state_dict , _ = storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config","title":"AutoModel"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.names_to_configs","text":"Holds the map from name to config type","title":"names_to_configs"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.from_name","text":"Source code in glasses/models/auto/base.py 30 31 32 33 34 35 36 37 38 39 40 @classmethod def from_name ( cls , name : str ): if name not in cls . names_to_configs : suggestions = difflib . get_close_matches ( name , cls . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = cls . names_to_configs [ name ] return config . build ()","title":"from_name()"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.from_pretrained","text":"Source code in glasses/models/auto/base.py 42 43 44 45 46 47 48 49 50 51 52 53 54 @classmethod def from_pretrained ( cls , name : str , config : Optional [ Config ] = None , storage : Storage = None ) -> nn . Module : storage = LocalStorage () if storage is None else storage model = cls . from_name ( name ) if config is None else config . build () state_dict , _ = storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config","title":"from_pretrained()"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.get_config_from_name","text":"Source code in glasses/models/auto/base.py 26 27 28 @classmethod def get_config_from_name ( cls , name : str ) -> Config : return cls . names_to_configs [ name ]","title":"get_config_from_name()"},{"location":"reference/models/auto/model_zoo/","text":"ModelZoo Bases: dict Source code in glasses/models/auto/model_zoo.py 1 2 class ModelZoo ( dict ): pass","title":"model_zoo"},{"location":"reference/models/auto/model_zoo/#glasses.models.auto.model_zoo.ModelZoo","text":"Bases: dict Source code in glasses/models/auto/model_zoo.py 1 2 class ModelZoo ( dict ): pass","title":"ModelZoo"},{"location":"reference/models/auto/utils/","text":"CONFIG_VAR_NAME = 'CONFIG' module-attribute get_names_to_configs_map ( * args , ** kwargs ) Source code in glasses/models/auto/utils.py 31 32 33 34 35 36 37 38 39 40 41 42 def get_names_to_configs_map ( * args , ** kwargs ): names_to_models_map = {} for module in iter_models_modules ( * args , ** kwargs ): submodule = importlib . import_module ( \".\" , f \" { module } .zoo\" ) try : zoo = vars ( submodule )[ \"zoo\" ] except KeyError : raise KeyError ( f \"A `zoo.py` was found in { module } but no `zoo` was defined.\" ) names_to_models_map = { ** names_to_models_map , ** zoo } return names_to_models_map iter_models_modules ( package , ignore_dirs = None ) Source code in glasses/models/auto/utils.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def iter_models_modules ( package : str , ignore_dirs : Optional [ List [ str ]] = None ) -> Iterator [ str ]: ignore_dirs = [] if ignore_dirs is None else ignore_dirs # the following folders will be skipeed by default ignore_dirs += [ \"auto\" , \"heads\" , \"__pycache__\" , \"common\" ] configs_to_models = {} # we import the package module = importlib . import_module ( \".\" , package ) if not module . __file__ : raise ModuleNotFoundError ( f \" { package } doesn't exist.\" ) # and we get the path to the folder it's contained module_path = Path ( module . __file__ ) . parent # then we iterate all the subdirs and we look for packages to import for file_or_dir in module_path . iterdir (): # if we have found a dir and it's not in ignore is_valid_dir = file_or_dir . is_dir () and file_or_dir . stem not in ignore_dirs if is_valid_dir : has_a_model = ( file_or_dir / \"model.py\" ) . exists () if has_a_model : yield f \" { package } . { file_or_dir . stem } \"","title":"utils"},{"location":"reference/models/auto/utils/#glasses.models.auto.utils.CONFIG_VAR_NAME","text":"","title":"CONFIG_VAR_NAME"},{"location":"reference/models/auto/utils/#glasses.models.auto.utils.get_names_to_configs_map","text":"Source code in glasses/models/auto/utils.py 31 32 33 34 35 36 37 38 39 40 41 42 def get_names_to_configs_map ( * args , ** kwargs ): names_to_models_map = {} for module in iter_models_modules ( * args , ** kwargs ): submodule = importlib . import_module ( \".\" , f \" { module } .zoo\" ) try : zoo = vars ( submodule )[ \"zoo\" ] except KeyError : raise KeyError ( f \"A `zoo.py` was found in { module } but no `zoo` was defined.\" ) names_to_models_map = { ** names_to_models_map , ** zoo } return names_to_models_map","title":"get_names_to_configs_map()"},{"location":"reference/models/auto/utils/#glasses.models.auto.utils.iter_models_modules","text":"Source code in glasses/models/auto/utils.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def iter_models_modules ( package : str , ignore_dirs : Optional [ List [ str ]] = None ) -> Iterator [ str ]: ignore_dirs = [] if ignore_dirs is None else ignore_dirs # the following folders will be skipeed by default ignore_dirs += [ \"auto\" , \"heads\" , \"__pycache__\" , \"common\" ] configs_to_models = {} # we import the package module = importlib . import_module ( \".\" , package ) if not module . __file__ : raise ModuleNotFoundError ( f \" { package } doesn't exist.\" ) # and we get the path to the folder it's contained module_path = Path ( module . __file__ ) . parent # then we iterate all the subdirs and we look for packages to import for file_or_dir in module_path . iterdir (): # if we have found a dir and it's not in ignore is_valid_dir = file_or_dir . is_dir () and file_or_dir . stem not in ignore_dirs if is_valid_dir : has_a_model = ( file_or_dir / \"model.py\" ) . exists () if has_a_model : yield f \" { package } . { file_or_dir . stem } \"","title":"iter_models_modules()"},{"location":"reference/models/vision/","text":"","title":"Index"},{"location":"reference/models/vision/auto/","text":"AutoModelBackbone Bases: AutoModel Source code in glasses/models/vision/auto.py 5 6 class AutoModelBackbone ( AutoModel ): names_to_configs = get_names_to_configs_map ( \"glasses.models.vision.backbones\" ) names_to_configs = get_names_to_configs_map ( 'glasses.models.vision.backbones' ) class-attribute AutoModelForClassification Bases: AutoModel Source code in glasses/models/vision/auto.py 9 10 class AutoModelForClassification ( AutoModel ): names_to_configs = get_names_to_configs_map ( \"glasses.models.vision.classification\" ) names_to_configs = get_names_to_configs_map ( 'glasses.models.vision.classification' ) class-attribute","title":"auto"},{"location":"reference/models/vision/auto/#glasses.models.vision.auto.AutoModelBackbone","text":"Bases: AutoModel Source code in glasses/models/vision/auto.py 5 6 class AutoModelBackbone ( AutoModel ): names_to_configs = get_names_to_configs_map ( \"glasses.models.vision.backbones\" )","title":"AutoModelBackbone"},{"location":"reference/models/vision/auto/#glasses.models.vision.auto.AutoModelBackbone.names_to_configs","text":"","title":"names_to_configs"},{"location":"reference/models/vision/auto/#glasses.models.vision.auto.AutoModelForClassification","text":"Bases: AutoModel Source code in glasses/models/vision/auto.py 9 10 class AutoModelForClassification ( AutoModel ): names_to_configs = get_names_to_configs_map ( \"glasses.models.vision.classification\" )","title":"AutoModelForClassification"},{"location":"reference/models/vision/auto/#glasses.models.vision.auto.AutoModelForClassification.names_to_configs","text":"","title":"names_to_configs"},{"location":"reference/models/vision/backbones/","text":"","title":"Index"},{"location":"reference/models/vision/backbones/base/","text":"Backbone Bases: nn . Module Source code in glasses/models/vision/backbones/base.py 5 6 7 class Backbone ( nn . Module ): def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented forward ( pixel_values ) Source code in glasses/models/vision/backbones/base.py 6 7 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented","title":"base"},{"location":"reference/models/vision/backbones/base/#glasses.models.vision.backbones.base.Backbone","text":"Bases: nn . Module Source code in glasses/models/vision/backbones/base.py 5 6 7 class Backbone ( nn . Module ): def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented","title":"Backbone"},{"location":"reference/models/vision/backbones/base/#glasses.models.vision.backbones.base.Backbone.forward","text":"Source code in glasses/models/vision/backbones/base.py 6 7 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented","title":"forward()"},{"location":"reference/models/vision/backbones/dummy/","text":"","title":"Index"},{"location":"reference/models/vision/backbones/dummy/config/","text":"DummyConfig dataclass Bases: Config Source code in glasses/models/vision/backbones/dummy/config.py 6 7 8 9 10 11 12 @dataclass class DummyConfig ( Config ): in_channels : int = 3 out_channels : int = 64 def build ( self ): return Dummy ( ** self . __dict__ ) in_channels : int = 3 class-attribute out_channels : int = 64 class-attribute build () Source code in glasses/models/vision/backbones/dummy/config.py 11 12 def build ( self ): return Dummy ( ** self . __dict__ )","title":"config"},{"location":"reference/models/vision/backbones/dummy/config/#glasses.models.vision.backbones.dummy.config.DummyConfig","text":"Bases: Config Source code in glasses/models/vision/backbones/dummy/config.py 6 7 8 9 10 11 12 @dataclass class DummyConfig ( Config ): in_channels : int = 3 out_channels : int = 64 def build ( self ): return Dummy ( ** self . __dict__ )","title":"DummyConfig"},{"location":"reference/models/vision/backbones/dummy/config/#glasses.models.vision.backbones.dummy.config.DummyConfig.in_channels","text":"","title":"in_channels"},{"location":"reference/models/vision/backbones/dummy/config/#glasses.models.vision.backbones.dummy.config.DummyConfig.out_channels","text":"","title":"out_channels"},{"location":"reference/models/vision/backbones/dummy/config/#glasses.models.vision.backbones.dummy.config.DummyConfig.build","text":"Source code in glasses/models/vision/backbones/dummy/config.py 11 12 def build ( self ): return Dummy ( ** self . __dict__ )","title":"build()"},{"location":"reference/models/vision/backbones/dummy/model/","text":"Dummy Bases: Backbone Source code in glasses/models/vision/backbones/dummy/model.py 7 8 9 10 11 12 13 class Dummy ( Backbone ): def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )] conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) instance-attribute __init__ ( in_channels , out_channels ) Source code in glasses/models/vision/backbones/dummy/model.py 8 9 10 def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) forward ( pixel_values ) Source code in glasses/models/vision/backbones/dummy/model.py 12 13 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )]","title":"model"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy","text":"Bases: Backbone Source code in glasses/models/vision/backbones/dummy/model.py 7 8 9 10 11 12 13 class Dummy ( Backbone ): def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )]","title":"Dummy"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy.conv","text":"","title":"conv"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy.__init__","text":"Source code in glasses/models/vision/backbones/dummy/model.py 8 9 10 def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 )","title":"__init__()"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy.forward","text":"Source code in glasses/models/vision/backbones/dummy/model.py 12 13 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )]","title":"forward()"},{"location":"reference/models/vision/backbones/dummy/zoo/","text":"zoo = ModelZoo ( dummy_d0 = DummyConfig (), dummy_d1 = DummyConfig ( out_channels = 128 )) module-attribute","title":"zoo"},{"location":"reference/models/vision/backbones/dummy/zoo/#glasses.models.vision.backbones.dummy.zoo.zoo","text":"","title":"zoo"},{"location":"reference/models/vision/classification/","text":"","title":"Index"},{"location":"reference/models/vision/classification/base/","text":"ModelForClassification Bases: nn . Module Base class for classification models Define a custom classification model. It can be whatever you want, the only contrain is that it must return a ModelForClassificationOutput . class MyModelForClassification ( ModelForClassification ): def __init__ ( self , in_channels : int , num_classes : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , 64 , kernel_size = 3 ) self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( 64 , num_classes ) def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : x = self . conv ( pixel_values ) x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return { \"logits\" : x } The above example is a fixed models, it doesn't have composable part. In reality, classification models are (usually) composed by a backbone and a head . Since all the backbones and heads in glasses must follow known rules, it trivial to compose them. from glasses.models.vision.backbones import ResNet class ResNetForClassification ( ModelForClassification ): def __init__ ( self , in_channels : int , ... , num_classes : int ): super () . __init__ () self . backbone = ResNet ( in_channels , .... ) self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( 64 , num_classes ) def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : features = self . backbone ( pixel_values ) x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return { \"logits\" : x } In 99% of cases you will take advantage of the AnyModelForClassification that allows you to mix on the fly any backbone and classification head in glasses. Source code in glasses/models/vision/classification/base.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class ModelForClassification ( nn . Module ): \"\"\"Base class for classification models Define a custom classification model. It can be whatever you want, the only contrain is that it **must** return a `ModelForClassificationOutput`. ```python class MyModelForClassification(ModelForClassification): def __init__(self, in_channels: int, num_classes: int ): super().__init__() self.conv = nn.Conv2d(in_channels, 64, kernel_size=3) self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(64, num_classes) def forward(self, pixel_values: Tensor) -> ModelForClassificationOutput: x = self.conv(pixel_values) x = self.pool(x) x = self.flat(x) x = self.fc(x) return {\"logits\": x} ``` The above example is a fixed models, it doesn't have composable part. In reality, classification models are (usually) composed by a **backbone** and a **head**. Since all the backbones and heads in glasses must follow known rules, it trivial to compose them. ```python from glasses.models.vision.backbones import ResNet class ResNetForClassification(ModelForClassification): def __init__(self, in_channels: int, ..., num_classes: int): super().__init__() self.backbone =ResNet(in_channels, ....) self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(64, num_classes) def forward(self, pixel_values: Tensor) -> ModelForClassificationOutput: features = self.backbone(pixel_values) x = features[-1] x = self.pool(x) x = self.flat(x) x = self.fc(x) return {\"logits\": x} ``` In 99% of cases you will take advantage of the [`AnyModelForClassification`]() that allows you to mix on the fly any backbone and classification head in glasses. \"\"\" def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : \"\"\"The forward method for classification head. Args: pixel_values (Tensor): The input image. Raises: NotImplemented: Returns: Tensor: The logits. \"\"\" raise NotImplemented forward ( pixel_values ) The forward method for classification head. Parameters: Name Type Description Default pixel_values Tensor The input image. required Returns: Name Type Description Tensor ModelForClassificationOutput The logits. Source code in glasses/models/vision/classification/base.py 59 60 61 62 63 64 65 66 67 68 69 70 71 def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : \"\"\"The forward method for classification head. Args: pixel_values (Tensor): The input image. Raises: NotImplemented: Returns: Tensor: The logits. \"\"\" raise NotImplemented","title":"base"},{"location":"reference/models/vision/classification/base/#glasses.models.vision.classification.base.ModelForClassification","text":"Bases: nn . Module Base class for classification models Define a custom classification model. It can be whatever you want, the only contrain is that it must return a ModelForClassificationOutput . class MyModelForClassification ( ModelForClassification ): def __init__ ( self , in_channels : int , num_classes : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , 64 , kernel_size = 3 ) self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( 64 , num_classes ) def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : x = self . conv ( pixel_values ) x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return { \"logits\" : x } The above example is a fixed models, it doesn't have composable part. In reality, classification models are (usually) composed by a backbone and a head . Since all the backbones and heads in glasses must follow known rules, it trivial to compose them. from glasses.models.vision.backbones import ResNet class ResNetForClassification ( ModelForClassification ): def __init__ ( self , in_channels : int , ... , num_classes : int ): super () . __init__ () self . backbone = ResNet ( in_channels , .... ) self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( 64 , num_classes ) def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : features = self . backbone ( pixel_values ) x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return { \"logits\" : x } In 99% of cases you will take advantage of the AnyModelForClassification that allows you to mix on the fly any backbone and classification head in glasses. Source code in glasses/models/vision/classification/base.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class ModelForClassification ( nn . Module ): \"\"\"Base class for classification models Define a custom classification model. It can be whatever you want, the only contrain is that it **must** return a `ModelForClassificationOutput`. ```python class MyModelForClassification(ModelForClassification): def __init__(self, in_channels: int, num_classes: int ): super().__init__() self.conv = nn.Conv2d(in_channels, 64, kernel_size=3) self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(64, num_classes) def forward(self, pixel_values: Tensor) -> ModelForClassificationOutput: x = self.conv(pixel_values) x = self.pool(x) x = self.flat(x) x = self.fc(x) return {\"logits\": x} ``` The above example is a fixed models, it doesn't have composable part. In reality, classification models are (usually) composed by a **backbone** and a **head**. Since all the backbones and heads in glasses must follow known rules, it trivial to compose them. ```python from glasses.models.vision.backbones import ResNet class ResNetForClassification(ModelForClassification): def __init__(self, in_channels: int, ..., num_classes: int): super().__init__() self.backbone =ResNet(in_channels, ....) self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(64, num_classes) def forward(self, pixel_values: Tensor) -> ModelForClassificationOutput: features = self.backbone(pixel_values) x = features[-1] x = self.pool(x) x = self.flat(x) x = self.fc(x) return {\"logits\": x} ``` In 99% of cases you will take advantage of the [`AnyModelForClassification`]() that allows you to mix on the fly any backbone and classification head in glasses. \"\"\" def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : \"\"\"The forward method for classification head. Args: pixel_values (Tensor): The input image. Raises: NotImplemented: Returns: Tensor: The logits. \"\"\" raise NotImplemented","title":"ModelForClassification"},{"location":"reference/models/vision/classification/base/#glasses.models.vision.classification.base.ModelForClassification.forward","text":"The forward method for classification head. Parameters: Name Type Description Default pixel_values Tensor The input image. required Returns: Name Type Description Tensor ModelForClassificationOutput The logits. Source code in glasses/models/vision/classification/base.py 59 60 61 62 63 64 65 66 67 68 69 70 71 def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : \"\"\"The forward method for classification head. Args: pixel_values (Tensor): The input image. Raises: NotImplemented: Returns: Tensor: The logits. \"\"\" raise NotImplemented","title":"forward()"},{"location":"reference/models/vision/classification/outputs/","text":"ModelForClassificationOutput Bases: TypedDict The output for image classification models. Source code in glasses/models/vision/classification/outputs.py 5 6 7 8 class ModelForClassificationOutput ( TypedDict ): \"\"\"The output for image classification models.\"\"\" logits : Tensor logits : Tensor class-attribute","title":"outputs"},{"location":"reference/models/vision/classification/outputs/#glasses.models.vision.classification.outputs.ModelForClassificationOutput","text":"Bases: TypedDict The output for image classification models. Source code in glasses/models/vision/classification/outputs.py 5 6 7 8 class ModelForClassificationOutput ( TypedDict ): \"\"\"The output for image classification models.\"\"\" logits : Tensor","title":"ModelForClassificationOutput"},{"location":"reference/models/vision/classification/outputs/#glasses.models.vision.classification.outputs.ModelForClassificationOutput.logits","text":"","title":"logits"},{"location":"reference/models/vision/classification/common/","text":"","title":"Index"},{"location":"reference/models/vision/classification/common/config/","text":"AnyModelForClassificationConfig dataclass Bases: Config Source code in glasses/models/vision/classification/common/config.py 6 7 8 9 10 11 12 13 14 @dataclass class AnyModelForClassificationConfig ( Config ): backbone_config : Config head_config : Config def build ( self ) -> AnyModelForClassification : backbone = self . backbone_config . build () head = self . head_config . build () return AnyModelForClassification ( backbone , head ) backbone_config : Config class-attribute head_config : Config class-attribute build () Source code in glasses/models/vision/classification/common/config.py 11 12 13 14 def build ( self ) -> AnyModelForClassification : backbone = self . backbone_config . build () head = self . head_config . build () return AnyModelForClassification ( backbone , head )","title":"config"},{"location":"reference/models/vision/classification/common/config/#glasses.models.vision.classification.common.config.AnyModelForClassificationConfig","text":"Bases: Config Source code in glasses/models/vision/classification/common/config.py 6 7 8 9 10 11 12 13 14 @dataclass class AnyModelForClassificationConfig ( Config ): backbone_config : Config head_config : Config def build ( self ) -> AnyModelForClassification : backbone = self . backbone_config . build () head = self . head_config . build () return AnyModelForClassification ( backbone , head )","title":"AnyModelForClassificationConfig"},{"location":"reference/models/vision/classification/common/config/#glasses.models.vision.classification.common.config.AnyModelForClassificationConfig.backbone_config","text":"","title":"backbone_config"},{"location":"reference/models/vision/classification/common/config/#glasses.models.vision.classification.common.config.AnyModelForClassificationConfig.head_config","text":"","title":"head_config"},{"location":"reference/models/vision/classification/common/config/#glasses.models.vision.classification.common.config.AnyModelForClassificationConfig.build","text":"Source code in glasses/models/vision/classification/common/config.py 11 12 13 14 def build ( self ) -> AnyModelForClassification : backbone = self . backbone_config . build () head = self . head_config . build () return AnyModelForClassification ( backbone , head )","title":"build()"},{"location":"reference/models/vision/classification/common/model/","text":"AnyModelForClassification Bases: ModelForClassification Source code in glasses/models/vision/classification/common/model.py 11 12 13 14 15 16 17 18 19 20 class AnyModelForClassification ( ModelForClassification ): def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : features : List [ Tensor ] = self . backbone ( pixel_values ) logits : Tensor = self . head ( features ) return { \"logits\" : logits } backbone = backbone instance-attribute head = head instance-attribute __init__ ( backbone , head ) Source code in glasses/models/vision/classification/common/model.py 12 13 14 15 def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head forward ( pixel_values ) Source code in glasses/models/vision/classification/common/model.py 17 18 19 20 def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : features : List [ Tensor ] = self . backbone ( pixel_values ) logits : Tensor = self . head ( features ) return { \"logits\" : logits }","title":"model"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification","text":"Bases: ModelForClassification Source code in glasses/models/vision/classification/common/model.py 11 12 13 14 15 16 17 18 19 20 class AnyModelForClassification ( ModelForClassification ): def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : features : List [ Tensor ] = self . backbone ( pixel_values ) logits : Tensor = self . head ( features ) return { \"logits\" : logits }","title":"AnyModelForClassification"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.backbone","text":"","title":"backbone"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.head","text":"","title":"head"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.__init__","text":"Source code in glasses/models/vision/classification/common/model.py 12 13 14 15 def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head","title":"__init__()"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.forward","text":"Source code in glasses/models/vision/classification/common/model.py 17 18 19 20 def forward ( self , pixel_values : Tensor ) -> ModelForClassificationOutput : features : List [ Tensor ] = self . backbone ( pixel_values ) logits : Tensor = self . head ( features ) return { \"logits\" : logits }","title":"forward()"},{"location":"reference/models/vision/classification/dummy/","text":"","title":"Index"},{"location":"reference/models/vision/classification/dummy/config/","text":"DummyForClassificationConfig dataclass Bases: AnyModelForClassificationConfig Config for Dummy model Source code in glasses/models/vision/classification/dummy/config.py 8 9 10 11 12 13 @dataclass class DummyForClassificationConfig ( AnyModelForClassificationConfig ): \"\"\"Config for [`Dummy`](/models/vision/classification/dummy) model\"\"\" backbone_config : DummyConfig head_config : LinearHeadConfig backbone_config : DummyConfig class-attribute head_config : LinearHeadConfig class-attribute","title":"config"},{"location":"reference/models/vision/classification/dummy/config/#glasses.models.vision.classification.dummy.config.DummyForClassificationConfig","text":"Bases: AnyModelForClassificationConfig Config for Dummy model Source code in glasses/models/vision/classification/dummy/config.py 8 9 10 11 12 13 @dataclass class DummyForClassificationConfig ( AnyModelForClassificationConfig ): \"\"\"Config for [`Dummy`](/models/vision/classification/dummy) model\"\"\" backbone_config : DummyConfig head_config : LinearHeadConfig","title":"DummyForClassificationConfig"},{"location":"reference/models/vision/classification/dummy/config/#glasses.models.vision.classification.dummy.config.DummyForClassificationConfig.backbone_config","text":"","title":"backbone_config"},{"location":"reference/models/vision/classification/dummy/config/#glasses.models.vision.classification.dummy.config.DummyForClassificationConfig.head_config","text":"","title":"head_config"},{"location":"reference/models/vision/classification/dummy/model/","text":"CONFIG = DummyForClassificationConfig module-attribute DummyForClassification Bases: AnyModelForClassification Source code in glasses/models/vision/classification/dummy/model.py 7 8 class DummyForClassification ( AnyModelForClassification ): pass","title":"model"},{"location":"reference/models/vision/classification/dummy/model/#glasses.models.vision.classification.dummy.model.CONFIG","text":"","title":"CONFIG"},{"location":"reference/models/vision/classification/dummy/model/#glasses.models.vision.classification.dummy.model.DummyForClassification","text":"Bases: AnyModelForClassification Source code in glasses/models/vision/classification/dummy/model.py 7 8 class DummyForClassification ( AnyModelForClassification ): pass","title":"DummyForClassification"},{"location":"reference/models/vision/classification/dummy/zoo/","text":"zoo = ModelZoo ( dummy_d0_im = DummyForClassificationConfig ( backbone_config = DummyConfig ( 3 , 64 ), head_config = LinearHeadConfig ( 64 , 1000 ))) module-attribute","title":"zoo"},{"location":"reference/models/vision/classification/dummy/zoo/#glasses.models.vision.classification.dummy.zoo.zoo","text":"","title":"zoo"},{"location":"reference/models/vision/classification/heads/","text":"","title":"Index"},{"location":"reference/models/vision/classification/heads/base/","text":"HeadForClassification Bases: nn . Module Base class for classification heads Define a custom classification head class LinearHead ( HeadForClassification ): def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x Source code in glasses/models/vision/classification/heads/base.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class HeadForClassification ( nn . Module ): \"\"\"Base class for classification heads Define a custom classification head ```python class LinearHead(HeadForClassification): def __init__(self, num_classes: int, in_channels: int): super().__init__() self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(in_channels, num_classes) def forward(self, features: List[Tensor]) -> Tensor: x = features[-1] x = self.pool(x) x = self.flat(x) x = self.fc(x) return x ``` \"\"\" def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented forward ( features ) The forward method for classification head. Parameters: Name Type Description Default features List [ Tensor ] A list of features. required Returns: Name Type Description Tensor Tensor The logits Source code in glasses/models/vision/classification/heads/base.py 29 30 31 32 33 34 35 36 37 38 39 40 41 def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented","title":"base"},{"location":"reference/models/vision/classification/heads/base/#glasses.models.vision.classification.heads.base.HeadForClassification","text":"Bases: nn . Module Base class for classification heads Define a custom classification head class LinearHead ( HeadForClassification ): def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x Source code in glasses/models/vision/classification/heads/base.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class HeadForClassification ( nn . Module ): \"\"\"Base class for classification heads Define a custom classification head ```python class LinearHead(HeadForClassification): def __init__(self, num_classes: int, in_channels: int): super().__init__() self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(in_channels, num_classes) def forward(self, features: List[Tensor]) -> Tensor: x = features[-1] x = self.pool(x) x = self.flat(x) x = self.fc(x) return x ``` \"\"\" def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented","title":"HeadForClassification"},{"location":"reference/models/vision/classification/heads/base/#glasses.models.vision.classification.heads.base.HeadForClassification.forward","text":"The forward method for classification head. Parameters: Name Type Description Default features List [ Tensor ] A list of features. required Returns: Name Type Description Tensor Tensor The logits Source code in glasses/models/vision/classification/heads/base.py 29 30 31 32 33 34 35 36 37 38 39 40 41 def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented","title":"forward()"},{"location":"reference/models/vision/classification/heads/linear_head/","text":"","title":"Index"},{"location":"reference/models/vision/classification/heads/linear_head/config/","text":"LinearHeadConfig dataclass Bases: Config Source code in glasses/models/vision/classification/heads/linear_head/config.py 5 6 7 8 9 10 11 @dataclass class LinearHeadConfig ( Config ): in_channels : int num_classes : int def build ( self ): return LinearHead ( ** self . __dict__ ) in_channels : int class-attribute num_classes : int class-attribute build () Source code in glasses/models/vision/classification/heads/linear_head/config.py 10 11 def build ( self ): return LinearHead ( ** self . __dict__ )","title":"config"},{"location":"reference/models/vision/classification/heads/linear_head/config/#glasses.models.vision.classification.heads.linear_head.config.LinearHeadConfig","text":"Bases: Config Source code in glasses/models/vision/classification/heads/linear_head/config.py 5 6 7 8 9 10 11 @dataclass class LinearHeadConfig ( Config ): in_channels : int num_classes : int def build ( self ): return LinearHead ( ** self . __dict__ )","title":"LinearHeadConfig"},{"location":"reference/models/vision/classification/heads/linear_head/config/#glasses.models.vision.classification.heads.linear_head.config.LinearHeadConfig.in_channels","text":"","title":"in_channels"},{"location":"reference/models/vision/classification/heads/linear_head/config/#glasses.models.vision.classification.heads.linear_head.config.LinearHeadConfig.num_classes","text":"","title":"num_classes"},{"location":"reference/models/vision/classification/heads/linear_head/config/#glasses.models.vision.classification.heads.linear_head.config.LinearHeadConfig.build","text":"Source code in glasses/models/vision/classification/heads/linear_head/config.py 10 11 def build ( self ): return LinearHead ( ** self . __dict__ )","title":"build()"},{"location":"reference/models/vision/classification/heads/linear_head/model/","text":"LinearHead Bases: HeadForClassification Source code in glasses/models/vision/classification/heads/linear_head/model.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class LinearHead ( HeadForClassification ): def __init__ ( self , in_channels : int , num_classes : int , ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x fc = nn . Linear ( in_channels , num_classes ) instance-attribute flat = nn . Flatten () instance-attribute pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) instance-attribute __init__ ( in_channels , num_classes ) Source code in glasses/models/vision/classification/heads/linear_head/model.py 9 10 11 12 13 14 15 16 17 def __init__ ( self , in_channels : int , num_classes : int , ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) forward ( features ) Source code in glasses/models/vision/classification/heads/linear_head/model.py 19 20 21 22 23 24 def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x","title":"model"},{"location":"reference/models/vision/classification/heads/linear_head/model/#glasses.models.vision.classification.heads.linear_head.model.LinearHead","text":"Bases: HeadForClassification Source code in glasses/models/vision/classification/heads/linear_head/model.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class LinearHead ( HeadForClassification ): def __init__ ( self , in_channels : int , num_classes : int , ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x","title":"LinearHead"},{"location":"reference/models/vision/classification/heads/linear_head/model/#glasses.models.vision.classification.heads.linear_head.model.LinearHead.fc","text":"","title":"fc"},{"location":"reference/models/vision/classification/heads/linear_head/model/#glasses.models.vision.classification.heads.linear_head.model.LinearHead.flat","text":"","title":"flat"},{"location":"reference/models/vision/classification/heads/linear_head/model/#glasses.models.vision.classification.heads.linear_head.model.LinearHead.pool","text":"","title":"pool"},{"location":"reference/models/vision/classification/heads/linear_head/model/#glasses.models.vision.classification.heads.linear_head.model.LinearHead.__init__","text":"Source code in glasses/models/vision/classification/heads/linear_head/model.py 9 10 11 12 13 14 15 16 17 def __init__ ( self , in_channels : int , num_classes : int , ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes )","title":"__init__()"},{"location":"reference/models/vision/classification/heads/linear_head/model/#glasses.models.vision.classification.heads.linear_head.model.LinearHead.forward","text":"Source code in glasses/models/vision/classification/heads/linear_head/model.py 19 20 21 22 23 24 def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x","title":"forward()"},{"location":"reference/models/vision/necks/Neck/","text":"Neck Bases: nn . Module Source code in glasses/models/vision/necks/Neck.py 5 6 7 class Neck ( nn . Module ): def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented forward ( features ) Source code in glasses/models/vision/necks/Neck.py 6 7 def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented","title":"Neck"},{"location":"reference/models/vision/necks/Neck/#glasses.models.vision.models.Neck.Neck","text":"Bases: nn . Module Source code in glasses/models/vision/necks/Neck.py 5 6 7 class Neck ( nn . Module ): def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented","title":"Neck"},{"location":"reference/models/vision/necks/Neck/#glasses.models.vision.models.Neck.Neck.forward","text":"Source code in glasses/models/vision/necks/Neck.py 6 7 def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented","title":"forward()"},{"location":"reference/storage/","text":"","title":"Index"},{"location":"reference/storage/base/","text":"Storage Bases: ABC Source code in glasses/storage/base.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Storage ( ABC ): @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass @property @abstractmethod def models ( self ) -> List [ str ]: pass def __contains__ ( self , key : str ) -> bool : return key in self . models __contains__ ( key ) Source code in glasses/storage/base.py 22 23 def __contains__ ( self , key : str ) -> bool : return key in self . models get ( key ) abstractmethod Source code in glasses/storage/base.py 13 14 15 @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass models () abstractmethod property Source code in glasses/storage/base.py 17 18 19 20 @property @abstractmethod def models ( self ) -> List [ str ]: pass put ( state_dict , config ) abstractmethod Source code in glasses/storage/base.py 9 10 11 @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass","title":"base"},{"location":"reference/storage/base/#glasses.storage.base.Storage","text":"Bases: ABC Source code in glasses/storage/base.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Storage ( ABC ): @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass @property @abstractmethod def models ( self ) -> List [ str ]: pass def __contains__ ( self , key : str ) -> bool : return key in self . models","title":"Storage"},{"location":"reference/storage/base/#glasses.storage.base.Storage.__contains__","text":"Source code in glasses/storage/base.py 22 23 def __contains__ ( self , key : str ) -> bool : return key in self . models","title":"__contains__()"},{"location":"reference/storage/base/#glasses.storage.base.Storage.get","text":"Source code in glasses/storage/base.py 13 14 15 @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass","title":"get()"},{"location":"reference/storage/base/#glasses.storage.base.Storage.models","text":"Source code in glasses/storage/base.py 17 18 19 20 @property @abstractmethod def models ( self ) -> List [ str ]: pass","title":"models()"},{"location":"reference/storage/base/#glasses.storage.base.Storage.put","text":"Source code in glasses/storage/base.py 9 10 11 @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass","title":"put()"},{"location":"reference/storage/local/","text":"LocalStorage dataclass Bases: Storage Source code in glasses/storage/local/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 @dataclass class LocalStorage ( Storage ): root : Path = Path ( \"/tmp/glasses\" ) override : bool = False fmt : str = \"pth\" def __post_init__ ( self ): self . root . mkdir ( exist_ok = True ) def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists () def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )] fmt : str = 'pth' class-attribute override : bool = False class-attribute root : Path = Path ( '/tmp/glasses' ) class-attribute __post_init__ () Source code in glasses/storage/local/__init__.py 18 19 def __post_init__ ( self ): self . root . mkdir ( exist_ok = True ) get ( key ) Source code in glasses/storage/local/__init__.py 34 35 36 37 38 39 40 41 def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config models () property Source code in glasses/storage/local/__init__.py 43 44 45 @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )] put ( key , state_dict , config ) Source code in glasses/storage/local/__init__.py 21 22 23 24 25 26 27 28 29 30 31 32 def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists ()","title":"local"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage","text":"Bases: Storage Source code in glasses/storage/local/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 @dataclass class LocalStorage ( Storage ): root : Path = Path ( \"/tmp/glasses\" ) override : bool = False fmt : str = \"pth\" def __post_init__ ( self ): self . root . mkdir ( exist_ok = True ) def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists () def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )]","title":"LocalStorage"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.fmt","text":"","title":"fmt"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.override","text":"","title":"override"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.root","text":"","title":"root"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.__post_init__","text":"Source code in glasses/storage/local/__init__.py 18 19 def __post_init__ ( self ): self . root . mkdir ( exist_ok = True )","title":"__post_init__()"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.get","text":"Source code in glasses/storage/local/__init__.py 34 35 36 37 38 39 40 41 def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config","title":"get()"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.models","text":"Source code in glasses/storage/local/__init__.py 43 44 45 @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )]","title":"models()"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.put","text":"Source code in glasses/storage/local/__init__.py 21 22 23 24 25 26 27 28 29 30 31 32 def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists ()","title":"put()"},{"location":"reference/tests/conftest/","text":"","title":"conftest"},{"location":"reference/tests/fixtures/","text":"TestAutoModel Bases: AutoModel Source code in glasses/tests/fixtures.py 26 27 class TestAutoModel ( AutoModel ): names_to_configs = { \"test1\" : TestConfig (), \"test2\" : TestConfig ( 2 )} names_to_configs = { 'test1' : TestConfig (), 'test2' : TestConfig ( 2 )} class-attribute TestConfig dataclass Bases: Config Source code in glasses/tests/fixtures.py 17 18 19 20 21 22 23 @dataclass class TestConfig ( Config ): in_channels : int = 1 out_channels : int = 2 def build ( self ): return TestModel ( ** self . __dict__ ) in_channels : int = 1 class-attribute out_channels : int = 2 class-attribute build () Source code in glasses/tests/fixtures.py 22 23 def build ( self ): return TestModel ( ** self . __dict__ ) TestModel Bases: nn . Module Source code in glasses/tests/fixtures.py 8 9 10 11 12 13 14 class TestModel ( nn . Module ): def __init__ ( self , in_channels , out_channels ): super () . __init__ () self . fc = nn . Conv2d ( in_channels , out_channels , kernel_size = 1 ) def forward ( self , x ): return self . fc ( x ) fc = nn . Conv2d ( in_channels , out_channels , kernel_size = 1 ) instance-attribute __init__ ( in_channels , out_channels ) Source code in glasses/tests/fixtures.py 9 10 11 def __init__ ( self , in_channels , out_channels ): super () . __init__ () self . fc = nn . Conv2d ( in_channels , out_channels , kernel_size = 1 ) forward ( x ) Source code in glasses/tests/fixtures.py 13 14 def forward ( self , x ): return self . fc ( x ) test_auto_model () Source code in glasses/tests/fixtures.py 40 41 42 @pytest . fixture def test_auto_model (): return TestAutoModel test_config () Source code in glasses/tests/fixtures.py 30 31 32 @pytest . fixture def test_config (): return TestConfig () test_model_func () Source code in glasses/tests/fixtures.py 35 36 37 @pytest . fixture def test_model_func (): return TestModel","title":"fixtures"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestAutoModel","text":"Bases: AutoModel Source code in glasses/tests/fixtures.py 26 27 class TestAutoModel ( AutoModel ): names_to_configs = { \"test1\" : TestConfig (), \"test2\" : TestConfig ( 2 )}","title":"TestAutoModel"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestAutoModel.names_to_configs","text":"","title":"names_to_configs"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestConfig","text":"Bases: Config Source code in glasses/tests/fixtures.py 17 18 19 20 21 22 23 @dataclass class TestConfig ( Config ): in_channels : int = 1 out_channels : int = 2 def build ( self ): return TestModel ( ** self . __dict__ )","title":"TestConfig"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestConfig.in_channels","text":"","title":"in_channels"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestConfig.out_channels","text":"","title":"out_channels"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestConfig.build","text":"Source code in glasses/tests/fixtures.py 22 23 def build ( self ): return TestModel ( ** self . __dict__ )","title":"build()"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestModel","text":"Bases: nn . Module Source code in glasses/tests/fixtures.py 8 9 10 11 12 13 14 class TestModel ( nn . Module ): def __init__ ( self , in_channels , out_channels ): super () . __init__ () self . fc = nn . Conv2d ( in_channels , out_channels , kernel_size = 1 ) def forward ( self , x ): return self . fc ( x )","title":"TestModel"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestModel.fc","text":"","title":"fc"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestModel.__init__","text":"Source code in glasses/tests/fixtures.py 9 10 11 def __init__ ( self , in_channels , out_channels ): super () . __init__ () self . fc = nn . Conv2d ( in_channels , out_channels , kernel_size = 1 )","title":"__init__()"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.TestModel.forward","text":"Source code in glasses/tests/fixtures.py 13 14 def forward ( self , x ): return self . fc ( x )","title":"forward()"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.test_auto_model","text":"Source code in glasses/tests/fixtures.py 40 41 42 @pytest . fixture def test_auto_model (): return TestAutoModel","title":"test_auto_model()"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.test_config","text":"Source code in glasses/tests/fixtures.py 30 31 32 @pytest . fixture def test_config (): return TestConfig ()","title":"test_config()"},{"location":"reference/tests/fixtures/#glasses.tests.fixtures.test_model_func","text":"Source code in glasses/tests/fixtures.py 35 36 37 @pytest . fixture def test_model_func (): return TestModel","title":"test_model_func()"},{"location":"reference/tests/auto/test_auto/","text":"test_auto_model ( test_config , test_model_func , test_auto_model ) Source code in glasses/tests/auto/test_auto.py 4 5 6 7 8 9 10 11 12 13 def test_auto_model ( test_config , test_model_func , test_auto_model ): model = test_auto_model . from_name ( \"test1\" ) assert isinstance ( model , test_model_func ) config = test_auto_model . get_config_from_name ( \"test1\" ) assert isinstance ( config , type ( test_config )) assert config == test_config","title":"test_auto"},{"location":"reference/tests/auto/test_auto/#glasses.tests.tests.test_auto.test_auto_model","text":"Source code in glasses/tests/auto/test_auto.py 4 5 6 7 8 9 10 11 12 13 def test_auto_model ( test_config , test_model_func , test_auto_model ): model = test_auto_model . from_name ( \"test1\" ) assert isinstance ( model , test_model_func ) config = test_auto_model . get_config_from_name ( \"test1\" ) assert isinstance ( config , type ( test_config )) assert config == test_config","title":"test_auto_model()"},{"location":"reference/tests/auto/test_auto_utils/","text":"test_get_names_to_configs_map () Source code in glasses/tests/auto/test_auto_utils.py 4 5 6 7 8 def test_get_names_to_configs_map (): zoo = get_names_to_configs_map ( \"package\" ) assert \"a1\" in zoo assert \"a2\" in zoo assert \"b1\" in zoo","title":"test_auto_utils"},{"location":"reference/tests/auto/test_auto_utils/#glasses.tests.tests.test_auto_utils.test_get_names_to_configs_map","text":"Source code in glasses/tests/auto/test_auto_utils.py 4 5 6 7 8 def test_get_names_to_configs_map (): zoo = get_names_to_configs_map ( \"package\" ) assert \"a1\" in zoo assert \"a2\" in zoo assert \"b1\" in zoo","title":"test_get_names_to_configs_map()"},{"location":"reference/tests/auto/package/","text":"","title":"Index"},{"location":"reference/tests/auto/package/a/","text":"","title":"Index"},{"location":"reference/tests/auto/package/a/model/","text":"","title":"model"},{"location":"reference/tests/auto/package/a/zoo/","text":"zoo = dict ( a1 = 1 , a2 = 2 ) module-attribute","title":"zoo"},{"location":"reference/tests/auto/package/a/zoo/#glasses.tests.tests.package.a.zoo.zoo","text":"","title":"zoo"},{"location":"reference/tests/auto/package/b/","text":"","title":"Index"},{"location":"reference/tests/auto/package/b/model/","text":"","title":"model"},{"location":"reference/tests/auto/package/b/zoo/","text":"zoo = dict ( b1 = 1 ) module-attribute","title":"zoo"},{"location":"reference/tests/auto/package/b/zoo/#glasses.tests.tests.package.b.zoo.zoo","text":"","title":"zoo"}]}