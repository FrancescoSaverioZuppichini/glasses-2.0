{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Modern Doc Template for your Python Project \ud83d\udc85 This website was build with: mkdocs.org mkdocs-material pymdown Features out of the box amazing good looking website thanks to mkdocs.org and mkdocs-material a wide array of cool features, such as code highlight, admonition, latex rendering and more thanks to pymdown FastApi cool terminal rendering auto documentation for code thanks to mkdocstrings automatic build thanks to github action, see the CI/CD page Getting Started Head over the getting started guide Cool stuff Code Highlights See here for doc print ( \"Hello World!\" ) Admonition See here for doc Hello There General Kenobi! Hello There General Kenobi! Error Boom! Latex See here for doc Inline \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) , \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) . Block \\[ E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j \\] \\[\\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align}\\]","title":"Docs"},{"location":"#a-modern-doc-template-for-your-python-project","text":"This website was build with: mkdocs.org mkdocs-material pymdown","title":"A Modern Doc Template for your Python Project \ud83d\udc85"},{"location":"#features","text":"out of the box amazing good looking website thanks to mkdocs.org and mkdocs-material a wide array of cool features, such as code highlight, admonition, latex rendering and more thanks to pymdown FastApi cool terminal rendering auto documentation for code thanks to mkdocstrings automatic build thanks to github action, see the CI/CD page","title":"Features"},{"location":"#getting-started","text":"Head over the getting started guide","title":"Getting Started"},{"location":"#cool-stuff","text":"","title":"Cool stuff"},{"location":"#code-highlights","text":"See here for doc print ( \"Hello World!\" )","title":"Code Highlights"},{"location":"#admonition","text":"See here for doc Hello There General Kenobi! Hello There General Kenobi! Error Boom!","title":"Admonition"},{"location":"#latex","text":"See here for doc Inline \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) , \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\) . Block \\[ E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j \\] \\[\\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align}\\]","title":"Latex"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"getting_started/","text":"$ AutoModel () . from_pretrained ( \"my_name\" ) [ 06 / 21 / 22 18 : 13 : 40 ] WARNING Error ( s ) in loading state_dict for AnyModelForClassification : base . py : 54 Unexpected key ( s ) in state_dict : \"head.fc.weight\" , \"head.fc.bias\" . INFO Loaded pretrained weights for dummy - d0 .","title":"Getting Started"},{"location":"models/vision/classification/dummy/","text":"Dummy model!","title":"Dummy"},{"location":"reference/SUMMARY/","text":"glasses config logger models auto base vision backbones base config_map dummy config model zoo classification auto auto configs_to_models names_to_configs common config model dummy config heads LinearHead base config_map stupid outputs necks Neck storage base local tests test_foo types","title":"SUMMARY"},{"location":"reference/logger/","text":"logger = logging . getLogger ( 'glasses' ) module-attribute","title":"logger"},{"location":"reference/logger/#glasses.logger.logger","text":"","title":"logger"},{"location":"reference/types/","text":"StateDict = Dict [ str , Tensor ] module-attribute","title":"types"},{"location":"reference/types/#glasses.types.StateDict","text":"","title":"StateDict"},{"location":"reference/config/","text":"Config dataclass Base class for configurations, all configuration must inherit from this class. Note A Config holds what is needed to create the inputs to your class. It's purely a data container . Thus, it must not have any side effect , any logic that requires the Config values to be somehow processed must be implemented somewhere else. A correct approach is to override the ConfigMixin.from_config method. A custom configuration can be written as follows: from glasses.config import Config @dataclass class MyConfig ( Config ): foo : int baa : str Source code in glasses/config/__init__.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 @dataclass class Config : \"\"\" Base class for configurations, all configuration **must** inherit from this class. !!! note A `Config` holds what is needed to create the inputs to your class. It's purely a **data container**. Thus, it **must not have any side effect**, any logic that requires the `Config` values to be somehow processed must be implemented somewhere else. A correct approach is to override the [`ConfigMixin.from_config`](#glasses.config.ConfigMixin.from_config) method. A custom configuration can be written as follows: ```python from glasses.config import Config @dataclass class MyConfig(Config): foo: int baa: str ``` \"\"\" pass ConfigMixin A mixin that add a from_config classmethod to your class. Override this method to create your class' inputs based on the Config . By default, the passed configuration to from_config is converted to dict. Source code in glasses/config/__init__.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class ConfigMixin : \"\"\" A mixin that add a `from_config` **classmethod** to your class. Override this method to create your class' inputs based on the `Config`. By default, the passed configuration to `from_config` is converted to dict. \"\"\" @classmethod def from_config ( cls , config : ConfigMixin . _config_type ) -> ConfigMixin : \"\"\"A class method that takes a `Config` an return the class correctly initialized using the `config` values. Args: config (Config): A `Config` instance. Returns: ConfigMixin: The class instance. \"\"\" return cls ( ** config . __dict__ ) from_config ( config ) classmethod A class method that takes a Config an return the class correctly initialized using the config values. Parameters: Name Type Description Default config Config A Config instance. required Returns: Name Type Description ConfigMixin ConfigMixin The class instance. Source code in glasses/config/__init__.py 39 40 41 42 43 44 45 46 47 48 49 @classmethod def from_config ( cls , config : ConfigMixin . _config_type ) -> ConfigMixin : \"\"\"A class method that takes a `Config` an return the class correctly initialized using the `config` values. Args: config (Config): A `Config` instance. Returns: ConfigMixin: The class instance. \"\"\" return cls ( ** config . __dict__ )","title":"config"},{"location":"reference/config/#glasses.config.Config","text":"Base class for configurations, all configuration must inherit from this class. Note A Config holds what is needed to create the inputs to your class. It's purely a data container . Thus, it must not have any side effect , any logic that requires the Config values to be somehow processed must be implemented somewhere else. A correct approach is to override the ConfigMixin.from_config method. A custom configuration can be written as follows: from glasses.config import Config @dataclass class MyConfig ( Config ): foo : int baa : str Source code in glasses/config/__init__.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 @dataclass class Config : \"\"\" Base class for configurations, all configuration **must** inherit from this class. !!! note A `Config` holds what is needed to create the inputs to your class. It's purely a **data container**. Thus, it **must not have any side effect**, any logic that requires the `Config` values to be somehow processed must be implemented somewhere else. A correct approach is to override the [`ConfigMixin.from_config`](#glasses.config.ConfigMixin.from_config) method. A custom configuration can be written as follows: ```python from glasses.config import Config @dataclass class MyConfig(Config): foo: int baa: str ``` \"\"\" pass","title":"Config"},{"location":"reference/config/#glasses.config.ConfigMixin","text":"A mixin that add a from_config classmethod to your class. Override this method to create your class' inputs based on the Config . By default, the passed configuration to from_config is converted to dict. Source code in glasses/config/__init__.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class ConfigMixin : \"\"\" A mixin that add a `from_config` **classmethod** to your class. Override this method to create your class' inputs based on the `Config`. By default, the passed configuration to `from_config` is converted to dict. \"\"\" @classmethod def from_config ( cls , config : ConfigMixin . _config_type ) -> ConfigMixin : \"\"\"A class method that takes a `Config` an return the class correctly initialized using the `config` values. Args: config (Config): A `Config` instance. Returns: ConfigMixin: The class instance. \"\"\" return cls ( ** config . __dict__ )","title":"ConfigMixin"},{"location":"reference/config/#glasses.config.ConfigMixin.from_config","text":"A class method that takes a Config an return the class correctly initialized using the config values. Parameters: Name Type Description Default config Config A Config instance. required Returns: Name Type Description ConfigMixin ConfigMixin The class instance. Source code in glasses/config/__init__.py 39 40 41 42 43 44 45 46 47 48 49 @classmethod def from_config ( cls , config : ConfigMixin . _config_type ) -> ConfigMixin : \"\"\"A class method that takes a `Config` an return the class correctly initialized using the `config` values. Args: config (Config): A `Config` instance. Returns: ConfigMixin: The class instance. \"\"\" return cls ( ** config . __dict__ )","title":"from_config()"},{"location":"reference/models/","text":"","title":"Index"},{"location":"reference/models/auto/","text":"","title":"Index"},{"location":"reference/models/auto/base/","text":"AutoModel Source code in glasses/models/auto/base.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class AutoModel : names_to_configs : Dict [ str , Config ] \"\"\"Holds the map from name to config type\"\"\" configs_to_models : Dict [ str , nn . Module ] \"\"\"Holds the map from config type to config model type\"\"\" def __init__ ( self , storage : Storage = None , ): \"\"\"The base `AutoModel` class. Usage: ```python auto_model = AutoModel() model, config = auto_model.from_name(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\", my_config) ``` Args: storage (Storage, optional): The storage to be used, if not passed `LocalStorage` will be used. Defaults to None. \"\"\" self . storage = LocalStorage () if storage is None else storage def from_name ( self , name : str , config : Optional [ Config ] = None ): if name not in self . names_to_configs : suggestions = difflib . get_close_matches ( name , self . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = self . names_to_configs [ name ] if config is None else config model_func = self . configs_to_models [ type ( config )] return model_func . from_config ( config ), config def from_pretrained ( self , name : str , config : Optional [ Config ] = None ) -> nn . Module : model , config = self . from_name ( name , config ) state_dict , _ = self . storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config configs_to_models : Dict [ str , nn . Module ] class-attribute Holds the map from config type to config model type names_to_configs : Dict [ str , Config ] class-attribute Holds the map from name to config type storage = LocalStorage () if storage is None else storage instance-attribute __init__ ( storage = None ) The base AutoModel class. Usage: auto_model = AutoModel () model , config = auto_model . from_name ( \"my_name\" ) model , config = auto_model . from_pretrained ( \"my_name\" ) model , config = auto_model . from_pretrained ( \"my_name\" , my_config ) Parameters: Name Type Description Default storage Storage The storage to be used, if not passed LocalStorage will be used. Defaults to None. None Source code in glasses/models/auto/base.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , storage : Storage = None , ): \"\"\"The base `AutoModel` class. Usage: ```python auto_model = AutoModel() model, config = auto_model.from_name(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\", my_config) ``` Args: storage (Storage, optional): The storage to be used, if not passed `LocalStorage` will be used. Defaults to None. \"\"\" self . storage = LocalStorage () if storage is None else storage from_name ( name , config = None ) Source code in glasses/models/auto/base.py 36 37 38 39 40 41 42 43 44 45 46 def from_name ( self , name : str , config : Optional [ Config ] = None ): if name not in self . names_to_configs : suggestions = difflib . get_close_matches ( name , self . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = self . names_to_configs [ name ] if config is None else config model_func = self . configs_to_models [ type ( config )] return model_func . from_config ( config ), config from_pretrained ( name , config = None ) Source code in glasses/models/auto/base.py 48 49 50 51 52 53 54 55 56 def from_pretrained ( self , name : str , config : Optional [ Config ] = None ) -> nn . Module : model , config = self . from_name ( name , config ) state_dict , _ = self . storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config","title":"base"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel","text":"Source code in glasses/models/auto/base.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class AutoModel : names_to_configs : Dict [ str , Config ] \"\"\"Holds the map from name to config type\"\"\" configs_to_models : Dict [ str , nn . Module ] \"\"\"Holds the map from config type to config model type\"\"\" def __init__ ( self , storage : Storage = None , ): \"\"\"The base `AutoModel` class. Usage: ```python auto_model = AutoModel() model, config = auto_model.from_name(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\", my_config) ``` Args: storage (Storage, optional): The storage to be used, if not passed `LocalStorage` will be used. Defaults to None. \"\"\" self . storage = LocalStorage () if storage is None else storage def from_name ( self , name : str , config : Optional [ Config ] = None ): if name not in self . names_to_configs : suggestions = difflib . get_close_matches ( name , self . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = self . names_to_configs [ name ] if config is None else config model_func = self . configs_to_models [ type ( config )] return model_func . from_config ( config ), config def from_pretrained ( self , name : str , config : Optional [ Config ] = None ) -> nn . Module : model , config = self . from_name ( name , config ) state_dict , _ = self . storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config","title":"AutoModel"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.configs_to_models","text":"Holds the map from config type to config model type","title":"configs_to_models"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.names_to_configs","text":"Holds the map from name to config type","title":"names_to_configs"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.storage","text":"","title":"storage"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.__init__","text":"The base AutoModel class. Usage: auto_model = AutoModel () model , config = auto_model . from_name ( \"my_name\" ) model , config = auto_model . from_pretrained ( \"my_name\" ) model , config = auto_model . from_pretrained ( \"my_name\" , my_config ) Parameters: Name Type Description Default storage Storage The storage to be used, if not passed LocalStorage will be used. Defaults to None. None Source code in glasses/models/auto/base.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , storage : Storage = None , ): \"\"\"The base `AutoModel` class. Usage: ```python auto_model = AutoModel() model, config = auto_model.from_name(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\") model, config = auto_model.from_pretrained(\"my_name\", my_config) ``` Args: storage (Storage, optional): The storage to be used, if not passed `LocalStorage` will be used. Defaults to None. \"\"\" self . storage = LocalStorage () if storage is None else storage","title":"__init__()"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.from_name","text":"Source code in glasses/models/auto/base.py 36 37 38 39 40 41 42 43 44 45 46 def from_name ( self , name : str , config : Optional [ Config ] = None ): if name not in self . names_to_configs : suggestions = difflib . get_close_matches ( name , self . names_to_configs . keys ()) msg = f 'Model \" { name } \" does not exists.' if len ( suggestions ) > 0 : msg += f ' Did you mean \" { suggestions [ 0 ] } ?\"' raise KeyError ( msg ) config = self . names_to_configs [ name ] if config is None else config model_func = self . configs_to_models [ type ( config )] return model_func . from_config ( config ), config","title":"from_name()"},{"location":"reference/models/auto/base/#glasses.models.auto.base.AutoModel.from_pretrained","text":"Source code in glasses/models/auto/base.py 48 49 50 51 52 53 54 55 56 def from_pretrained ( self , name : str , config : Optional [ Config ] = None ) -> nn . Module : model , config = self . from_name ( name , config ) state_dict , _ = self . storage . get ( name ) try : model . load_state_dict ( state_dict ) except RuntimeError as e : logger . warning ( str ( e )) logger . info ( f \"Loaded pretrained weights for { name } .\" ) return model , config","title":"from_pretrained()"},{"location":"reference/models/vision/","text":"","title":"Index"},{"location":"reference/models/vision/backbones/","text":"","title":"Index"},{"location":"reference/models/vision/backbones/base/","text":"Backbone Bases: nn . Module Source code in glasses/models/vision/backbones/base.py 5 6 7 class Backbone ( nn . Module ): def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented forward ( pixel_values ) Source code in glasses/models/vision/backbones/base.py 6 7 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented","title":"base"},{"location":"reference/models/vision/backbones/base/#glasses.models.vision.backbones.base.Backbone","text":"Bases: nn . Module Source code in glasses/models/vision/backbones/base.py 5 6 7 class Backbone ( nn . Module ): def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented","title":"Backbone"},{"location":"reference/models/vision/backbones/base/#glasses.models.vision.backbones.base.Backbone.forward","text":"Source code in glasses/models/vision/backbones/base.py 6 7 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: raise NotImplemented","title":"forward()"},{"location":"reference/models/vision/backbones/config_map/","text":"CONFIGS_TO_MODELS = { DummyConfig : Dummy } module-attribute","title":"config_map"},{"location":"reference/models/vision/backbones/config_map/#glasses.models.vision.backbones.config_map.CONFIGS_TO_MODELS","text":"","title":"CONFIGS_TO_MODELS"},{"location":"reference/models/vision/backbones/dummy/","text":"","title":"Index"},{"location":"reference/models/vision/backbones/dummy/config/","text":"DummyConfig dataclass Bases: Config Source code in glasses/models/vision/backbones/dummy/config.py 5 6 7 8 @dataclass class DummyConfig ( Config ): in_channels : int = 3 out_channels : int = 64 in_channels : int = 3 class-attribute out_channels : int = 64 class-attribute","title":"config"},{"location":"reference/models/vision/backbones/dummy/config/#glasses.models.vision.backbones.dummy.config.DummyConfig","text":"Bases: Config Source code in glasses/models/vision/backbones/dummy/config.py 5 6 7 8 @dataclass class DummyConfig ( Config ): in_channels : int = 3 out_channels : int = 64","title":"DummyConfig"},{"location":"reference/models/vision/backbones/dummy/config/#glasses.models.vision.backbones.dummy.config.DummyConfig.in_channels","text":"","title":"in_channels"},{"location":"reference/models/vision/backbones/dummy/config/#glasses.models.vision.backbones.dummy.config.DummyConfig.out_channels","text":"","title":"out_channels"},{"location":"reference/models/vision/backbones/dummy/model/","text":"Dummy Bases: Backbone , ConfigMixin Source code in glasses/models/vision/backbones/dummy/model.py 8 9 10 11 12 13 14 class Dummy ( Backbone , ConfigMixin ): def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )] conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) instance-attribute __init__ ( in_channels , out_channels ) Source code in glasses/models/vision/backbones/dummy/model.py 9 10 11 def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) forward ( pixel_values ) Source code in glasses/models/vision/backbones/dummy/model.py 13 14 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )]","title":"model"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy","text":"Bases: Backbone , ConfigMixin Source code in glasses/models/vision/backbones/dummy/model.py 8 9 10 11 12 13 14 class Dummy ( Backbone , ConfigMixin ): def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 ) def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )]","title":"Dummy"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy.conv","text":"","title":"conv"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy.__init__","text":"Source code in glasses/models/vision/backbones/dummy/model.py 9 10 11 def __init__ ( self , in_channels : int , out_channels : int ): super () . __init__ () self . conv = nn . Conv2d ( in_channels , out_channels , kernel_size = 3 )","title":"__init__()"},{"location":"reference/models/vision/backbones/dummy/model/#glasses.models.vision.backbones.dummy.model.Dummy.forward","text":"Source code in glasses/models/vision/backbones/dummy/model.py 13 14 def forward ( self , pixel_values : Tensor ) -> List [ Tensor ]: return [ self . conv ( pixel_values )]","title":"forward()"},{"location":"reference/models/vision/backbones/dummy/zoo/","text":"zoo = dict ( dummy_d0 = DummyConfig (), dummy_d1 = DummyConfig ( out_channels = 128 )) module-attribute","title":"zoo"},{"location":"reference/models/vision/backbones/dummy/zoo/#glasses.models.vision.backbones.dummy.zoo.zoo","text":"","title":"zoo"},{"location":"reference/models/vision/classification/","text":"","title":"Index"},{"location":"reference/models/vision/classification/outputs/","text":"ModelForClassificationOutput Bases: TypedDict The output for image classification models. Source code in glasses/models/vision/classification/outputs.py 5 6 7 8 class ModelForClassificationOutput ( TypedDict ): \"\"\"The output for image classification models.\"\"\" logits : Tensor logits : Tensor class-attribute","title":"outputs"},{"location":"reference/models/vision/classification/outputs/#glasses.models.vision.classification.outputs.ModelForClassificationOutput","text":"Bases: TypedDict The output for image classification models. Source code in glasses/models/vision/classification/outputs.py 5 6 7 8 class ModelForClassificationOutput ( TypedDict ): \"\"\"The output for image classification models.\"\"\" logits : Tensor","title":"ModelForClassificationOutput"},{"location":"reference/models/vision/classification/outputs/#glasses.models.vision.classification.outputs.ModelForClassificationOutput.logits","text":"","title":"logits"},{"location":"reference/models/vision/classification/auto/","text":"","title":"Index"},{"location":"reference/models/vision/classification/auto/auto/","text":"AutoModelForClassification Bases: AutoModel Source code in glasses/models/vision/classification/auto/auto.py 7 8 9 class AutoModelForClassification ( AutoModel ): names_to_configs = NAMES_TO_CONFIGS configs_to_models = CONFIGS_TO_MODELS configs_to_models = CONFIGS_TO_MODELS class-attribute names_to_configs = NAMES_TO_CONFIGS class-attribute","title":"auto"},{"location":"reference/models/vision/classification/auto/auto/#glasses.models.vision.classification.auto.auto.AutoModelForClassification","text":"Bases: AutoModel Source code in glasses/models/vision/classification/auto/auto.py 7 8 9 class AutoModelForClassification ( AutoModel ): names_to_configs = NAMES_TO_CONFIGS configs_to_models = CONFIGS_TO_MODELS","title":"AutoModelForClassification"},{"location":"reference/models/vision/classification/auto/auto/#glasses.models.vision.classification.auto.auto.AutoModelForClassification.configs_to_models","text":"","title":"configs_to_models"},{"location":"reference/models/vision/classification/auto/auto/#glasses.models.vision.classification.auto.auto.AutoModelForClassification.names_to_configs","text":"","title":"names_to_configs"},{"location":"reference/models/vision/classification/auto/configs_to_models/","text":"CONFIGS_TO_MODELS = { AnyModelForClassificationConfig : AnyModelForClassification , DummyForClassificationConfig : AnyModelForClassification } module-attribute","title":"configs_to_models"},{"location":"reference/models/vision/classification/auto/configs_to_models/#glasses.models.vision.classification.auto.configs_to_models.CONFIGS_TO_MODELS","text":"","title":"CONFIGS_TO_MODELS"},{"location":"reference/models/vision/classification/auto/names_to_configs/","text":"NAMES_TO_CONFIGS = { 'dummy-d0' : DummyForClassificationConfig ( DummyConfig (), LinearHeadConfig ( 10 , 64 )), 'dummy-d1' : DummyForClassificationConfig ( DummyConfig ( in_channels = 128 ), LinearHeadConfig ( 10 , 128 ))} module-attribute","title":"names_to_configs"},{"location":"reference/models/vision/classification/auto/names_to_configs/#glasses.models.vision.classification.auto.names_to_configs.NAMES_TO_CONFIGS","text":"","title":"NAMES_TO_CONFIGS"},{"location":"reference/models/vision/classification/common/","text":"","title":"Index"},{"location":"reference/models/vision/classification/common/config/","text":"AnyModelForClassificationConfig dataclass Source code in glasses/models/vision/classification/common/config.py 5 6 7 8 @dataclass class AnyModelForClassificationConfig : backbone_config : Config head_config : Config backbone_config : Config class-attribute head_config : Config class-attribute","title":"config"},{"location":"reference/models/vision/classification/common/config/#glasses.models.vision.classification.common.config.AnyModelForClassificationConfig","text":"Source code in glasses/models/vision/classification/common/config.py 5 6 7 8 @dataclass class AnyModelForClassificationConfig : backbone_config : Config head_config : Config","title":"AnyModelForClassificationConfig"},{"location":"reference/models/vision/classification/common/config/#glasses.models.vision.classification.common.config.AnyModelForClassificationConfig.backbone_config","text":"","title":"backbone_config"},{"location":"reference/models/vision/classification/common/config/#glasses.models.vision.classification.common.config.AnyModelForClassificationConfig.head_config","text":"","title":"head_config"},{"location":"reference/models/vision/classification/common/model/","text":"AnyModelForClassification Bases: nn . Module , ConfigMixin Source code in glasses/models/vision/classification/common/model.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class AnyModelForClassification ( nn . Module , ConfigMixin ): def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head def forward ( self , pixel_values ) -> ModelForClassificationOutput : features = self . backbone ( pixel_values ) logits = self . head ( features ) return { \"logits\" : logits } @classmethod def from_config ( cls , config : AnyModelForClassificationConfig ): backbone_config : Config = config . backbone_config head_config : Config = config . head_config backbone_func = BACKBONE_CONFIGS_TO_MODELS [ type ( backbone_config )] head_func = HEADS_CONFIGS_TO_MODELS [ type ( head_config )] return cls ( backbone_func . from_config ( backbone_config ), head_func . from_config ( head_config ), ) backbone = backbone instance-attribute head = head instance-attribute __init__ ( backbone , head ) Source code in glasses/models/vision/classification/common/model.py 14 15 16 17 def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head forward ( pixel_values ) Source code in glasses/models/vision/classification/common/model.py 19 20 21 22 def forward ( self , pixel_values ) -> ModelForClassificationOutput : features = self . backbone ( pixel_values ) logits = self . head ( features ) return { \"logits\" : logits } from_config ( config ) classmethod Source code in glasses/models/vision/classification/common/model.py 24 25 26 27 28 29 30 31 32 33 34 35 @classmethod def from_config ( cls , config : AnyModelForClassificationConfig ): backbone_config : Config = config . backbone_config head_config : Config = config . head_config backbone_func = BACKBONE_CONFIGS_TO_MODELS [ type ( backbone_config )] head_func = HEADS_CONFIGS_TO_MODELS [ type ( head_config )] return cls ( backbone_func . from_config ( backbone_config ), head_func . from_config ( head_config ), )","title":"model"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification","text":"Bases: nn . Module , ConfigMixin Source code in glasses/models/vision/classification/common/model.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class AnyModelForClassification ( nn . Module , ConfigMixin ): def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head def forward ( self , pixel_values ) -> ModelForClassificationOutput : features = self . backbone ( pixel_values ) logits = self . head ( features ) return { \"logits\" : logits } @classmethod def from_config ( cls , config : AnyModelForClassificationConfig ): backbone_config : Config = config . backbone_config head_config : Config = config . head_config backbone_func = BACKBONE_CONFIGS_TO_MODELS [ type ( backbone_config )] head_func = HEADS_CONFIGS_TO_MODELS [ type ( head_config )] return cls ( backbone_func . from_config ( backbone_config ), head_func . from_config ( head_config ), )","title":"AnyModelForClassification"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.backbone","text":"","title":"backbone"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.head","text":"","title":"head"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.__init__","text":"Source code in glasses/models/vision/classification/common/model.py 14 15 16 17 def __init__ ( self , backbone : nn . Module , head : nn . Module ): super () . __init__ () self . backbone = backbone self . head = head","title":"__init__()"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.forward","text":"Source code in glasses/models/vision/classification/common/model.py 19 20 21 22 def forward ( self , pixel_values ) -> ModelForClassificationOutput : features = self . backbone ( pixel_values ) logits = self . head ( features ) return { \"logits\" : logits }","title":"forward()"},{"location":"reference/models/vision/classification/common/model/#glasses.models.vision.classification.common.model.AnyModelForClassification.from_config","text":"Source code in glasses/models/vision/classification/common/model.py 24 25 26 27 28 29 30 31 32 33 34 35 @classmethod def from_config ( cls , config : AnyModelForClassificationConfig ): backbone_config : Config = config . backbone_config head_config : Config = config . head_config backbone_func = BACKBONE_CONFIGS_TO_MODELS [ type ( backbone_config )] head_func = HEADS_CONFIGS_TO_MODELS [ type ( head_config )] return cls ( backbone_func . from_config ( backbone_config ), head_func . from_config ( head_config ), )","title":"from_config()"},{"location":"reference/models/vision/classification/dummy/","text":"","title":"Index"},{"location":"reference/models/vision/classification/dummy/config/","text":"DummyForClassificationConfig dataclass Bases: AnyModelForClassificationConfig Config for Dummy model Source code in glasses/models/vision/classification/dummy/config.py 8 9 10 11 12 13 @dataclass class DummyForClassificationConfig ( AnyModelForClassificationConfig ): \"\"\"Config for [`Dummy`](/models/vision/classification/dummy) model\"\"\" backbone_config : DummyConfig head_config : LinearHeadConfig backbone_config : DummyConfig class-attribute head_config : LinearHeadConfig class-attribute","title":"config"},{"location":"reference/models/vision/classification/dummy/config/#glasses.models.vision.classification.dummy.config.DummyForClassificationConfig","text":"Bases: AnyModelForClassificationConfig Config for Dummy model Source code in glasses/models/vision/classification/dummy/config.py 8 9 10 11 12 13 @dataclass class DummyForClassificationConfig ( AnyModelForClassificationConfig ): \"\"\"Config for [`Dummy`](/models/vision/classification/dummy) model\"\"\" backbone_config : DummyConfig head_config : LinearHeadConfig","title":"DummyForClassificationConfig"},{"location":"reference/models/vision/classification/dummy/config/#glasses.models.vision.classification.dummy.config.DummyForClassificationConfig.backbone_config","text":"","title":"backbone_config"},{"location":"reference/models/vision/classification/dummy/config/#glasses.models.vision.classification.dummy.config.DummyForClassificationConfig.head_config","text":"","title":"head_config"},{"location":"reference/models/vision/classification/heads/LinearHead/","text":"LinearHead Bases: HeadForClassification , ConfigMixin Source code in glasses/models/vision/classification/heads/LinearHead.py 18 19 20 21 22 23 24 25 26 27 28 29 30 class LinearHead ( HeadForClassification , ConfigMixin ): def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x fc = nn . Linear ( in_channels , num_classes ) instance-attribute flat = nn . Flatten () instance-attribute pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) instance-attribute __init__ ( num_classes , in_channels ) Source code in glasses/models/vision/classification/heads/LinearHead.py 19 20 21 22 23 def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) forward ( features ) Source code in glasses/models/vision/classification/heads/LinearHead.py 25 26 27 28 29 30 def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x LinearHeadConfig dataclass Source code in glasses/models/vision/classification/heads/LinearHead.py 12 13 14 15 @dataclass class LinearHeadConfig : num_classes : int in_channels : int in_channels : int class-attribute num_classes : int class-attribute","title":"LinearHead"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHead","text":"Bases: HeadForClassification , ConfigMixin Source code in glasses/models/vision/classification/heads/LinearHead.py 18 19 20 21 22 23 24 25 26 27 28 29 30 class LinearHead ( HeadForClassification , ConfigMixin ): def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x","title":"LinearHead"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHead.fc","text":"","title":"fc"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHead.flat","text":"","title":"flat"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHead.pool","text":"","title":"pool"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHead.__init__","text":"Source code in glasses/models/vision/classification/heads/LinearHead.py 19 20 21 22 23 def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes )","title":"__init__()"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHead.forward","text":"Source code in glasses/models/vision/classification/heads/LinearHead.py 25 26 27 28 29 30 def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x","title":"forward()"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHeadConfig","text":"Source code in glasses/models/vision/classification/heads/LinearHead.py 12 13 14 15 @dataclass class LinearHeadConfig : num_classes : int in_channels : int","title":"LinearHeadConfig"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHeadConfig.in_channels","text":"","title":"in_channels"},{"location":"reference/models/vision/classification/heads/LinearHead/#glasses.models.vision.classification.models.LinearHead.LinearHeadConfig.num_classes","text":"","title":"num_classes"},{"location":"reference/models/vision/classification/heads/base/","text":"HeadForClassification Bases: nn . Module Base class for classification heads Define a custom classification head class LinearHead ( HeadForClassification , ConfigMixin ): def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x Source code in glasses/models/vision/classification/heads/base.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class HeadForClassification ( nn . Module ): \"\"\"Base class for classification heads Define a custom classification head ```python class LinearHead(HeadForClassification, ConfigMixin): def __init__(self, num_classes: int, in_channels: int): super().__init__() self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(in_channels, num_classes) def forward(self, features: List[Tensor]) -> Tensor: x = features[-1] x = self.pool(x) x = self.flat(x) x = self.fc(x) return x ``` \"\"\" def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented forward ( features ) The forward method for classification head. Parameters: Name Type Description Default features List [ Tensor ] A list of features. required Returns: Name Type Description Tensor Tensor The logits Source code in glasses/models/vision/classification/heads/base.py 30 31 32 33 34 35 36 37 38 39 40 41 42 def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented","title":"base"},{"location":"reference/models/vision/classification/heads/base/#glasses.models.vision.classification.models.base.HeadForClassification","text":"Bases: nn . Module Base class for classification heads Define a custom classification head class LinearHead ( HeadForClassification , ConfigMixin ): def __init__ ( self , num_classes : int , in_channels : int ): super () . __init__ () self . pool = nn . AdaptiveAvgPool2d (( 1 , 1 )) self . flat = nn . Flatten () self . fc = nn . Linear ( in_channels , num_classes ) def forward ( self , features : List [ Tensor ]) -> Tensor : x = features [ - 1 ] x = self . pool ( x ) x = self . flat ( x ) x = self . fc ( x ) return x Source code in glasses/models/vision/classification/heads/base.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class HeadForClassification ( nn . Module ): \"\"\"Base class for classification heads Define a custom classification head ```python class LinearHead(HeadForClassification, ConfigMixin): def __init__(self, num_classes: int, in_channels: int): super().__init__() self.pool = nn.AdaptiveAvgPool2d((1, 1)) self.flat = nn.Flatten() self.fc = nn.Linear(in_channels, num_classes) def forward(self, features: List[Tensor]) -> Tensor: x = features[-1] x = self.pool(x) x = self.flat(x) x = self.fc(x) return x ``` \"\"\" def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented","title":"HeadForClassification"},{"location":"reference/models/vision/classification/heads/base/#glasses.models.vision.classification.models.base.HeadForClassification.forward","text":"The forward method for classification head. Parameters: Name Type Description Default features List [ Tensor ] A list of features. required Returns: Name Type Description Tensor Tensor The logits Source code in glasses/models/vision/classification/heads/base.py 30 31 32 33 34 35 36 37 38 39 40 41 42 def forward ( self , features : List [ Tensor ]) -> Tensor : \"\"\"The forward method for classification head. Args: features (List[Tensor]): A list of features. Raises: NotImplemented: Returns: Tensor: The logits \"\"\" raise NotImplemented","title":"forward()"},{"location":"reference/models/vision/classification/heads/config_map/","text":"CONFIGS_TO_MODELS = { LinearHeadConfig : LinearHead , StupidHeadConfig : StupidHead } module-attribute","title":"config_map"},{"location":"reference/models/vision/classification/heads/config_map/#glasses.models.vision.classification.models.config_map.CONFIGS_TO_MODELS","text":"","title":"CONFIGS_TO_MODELS"},{"location":"reference/models/vision/classification/heads/stupid/","text":"StupidHead Bases: HeadForClassification , ConfigMixin Source code in glasses/models/vision/classification/heads/stupid.py 17 18 19 20 21 22 23 class StupidHead ( HeadForClassification , ConfigMixin ): def __init__ ( self , foo : str ): super () . __init__ () def forward ( self , features ): x = features [ - 1 ] return x __init__ ( foo ) Source code in glasses/models/vision/classification/heads/stupid.py 18 19 def __init__ ( self , foo : str ): super () . __init__ () forward ( features ) Source code in glasses/models/vision/classification/heads/stupid.py 21 22 23 def forward ( self , features ): x = features [ - 1 ] return x StupidHeadConfig dataclass Source code in glasses/models/vision/classification/heads/stupid.py 12 13 14 @dataclass class StupidHeadConfig : foo : str foo : str class-attribute","title":"stupid"},{"location":"reference/models/vision/classification/heads/stupid/#glasses.models.vision.classification.models.stupid.StupidHead","text":"Bases: HeadForClassification , ConfigMixin Source code in glasses/models/vision/classification/heads/stupid.py 17 18 19 20 21 22 23 class StupidHead ( HeadForClassification , ConfigMixin ): def __init__ ( self , foo : str ): super () . __init__ () def forward ( self , features ): x = features [ - 1 ] return x","title":"StupidHead"},{"location":"reference/models/vision/classification/heads/stupid/#glasses.models.vision.classification.models.stupid.StupidHead.__init__","text":"Source code in glasses/models/vision/classification/heads/stupid.py 18 19 def __init__ ( self , foo : str ): super () . __init__ ()","title":"__init__()"},{"location":"reference/models/vision/classification/heads/stupid/#glasses.models.vision.classification.models.stupid.StupidHead.forward","text":"Source code in glasses/models/vision/classification/heads/stupid.py 21 22 23 def forward ( self , features ): x = features [ - 1 ] return x","title":"forward()"},{"location":"reference/models/vision/classification/heads/stupid/#glasses.models.vision.classification.models.stupid.StupidHeadConfig","text":"Source code in glasses/models/vision/classification/heads/stupid.py 12 13 14 @dataclass class StupidHeadConfig : foo : str","title":"StupidHeadConfig"},{"location":"reference/models/vision/classification/heads/stupid/#glasses.models.vision.classification.models.stupid.StupidHeadConfig.foo","text":"","title":"foo"},{"location":"reference/models/vision/necks/Neck/","text":"Neck Bases: nn . Module Source code in glasses/models/vision/necks/Neck.py 5 6 7 class Neck ( nn . Module ): def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented forward ( features ) Source code in glasses/models/vision/necks/Neck.py 6 7 def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented","title":"Neck"},{"location":"reference/models/vision/necks/Neck/#glasses.models.vision.models.Neck.Neck","text":"Bases: nn . Module Source code in glasses/models/vision/necks/Neck.py 5 6 7 class Neck ( nn . Module ): def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented","title":"Neck"},{"location":"reference/models/vision/necks/Neck/#glasses.models.vision.models.Neck.Neck.forward","text":"Source code in glasses/models/vision/necks/Neck.py 6 7 def forward ( self , features : List [ Tensor ]) -> List [ Tensor ]: raise NotImplemented","title":"forward()"},{"location":"reference/storage/","text":"","title":"Index"},{"location":"reference/storage/base/","text":"Storage Bases: ABC Source code in glasses/storage/base.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Storage ( ABC ): @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass @property @abstractmethod def models ( self ) -> List [ str ]: pass def __contains__ ( self , key : str ) -> bool : return key in self . models __contains__ ( key ) Source code in glasses/storage/base.py 22 23 def __contains__ ( self , key : str ) -> bool : return key in self . models get ( key ) abstractmethod Source code in glasses/storage/base.py 13 14 15 @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass models () property abstractmethod Source code in glasses/storage/base.py 17 18 19 20 @property @abstractmethod def models ( self ) -> List [ str ]: pass put ( state_dict , config ) abstractmethod Source code in glasses/storage/base.py 9 10 11 @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass","title":"base"},{"location":"reference/storage/base/#glasses.storage.base.Storage","text":"Bases: ABC Source code in glasses/storage/base.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Storage ( ABC ): @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass @property @abstractmethod def models ( self ) -> List [ str ]: pass def __contains__ ( self , key : str ) -> bool : return key in self . models","title":"Storage"},{"location":"reference/storage/base/#glasses.storage.base.Storage.__contains__","text":"Source code in glasses/storage/base.py 22 23 def __contains__ ( self , key : str ) -> bool : return key in self . models","title":"__contains__()"},{"location":"reference/storage/base/#glasses.storage.base.Storage.get","text":"Source code in glasses/storage/base.py 13 14 15 @abstractmethod def get ( self , key : str ) -> Tuple [ StateDict , Dict ]: pass","title":"get()"},{"location":"reference/storage/base/#glasses.storage.base.Storage.models","text":"Source code in glasses/storage/base.py 17 18 19 20 @property @abstractmethod def models ( self ) -> List [ str ]: pass","title":"models()"},{"location":"reference/storage/base/#glasses.storage.base.Storage.put","text":"Source code in glasses/storage/base.py 9 10 11 @abstractmethod def put ( self , state_dict : StateDict , config : Dict ): pass","title":"put()"},{"location":"reference/storage/local/","text":"LocalStorage dataclass Bases: Storage Source code in glasses/storage/local/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 @dataclass class LocalStorage ( Storage ): root : Path = Path ( \"/tmp/glasses\" ) override : bool = False fmt : str = \"pth\" def __post_init__ ( self ): self . root . mkdir ( exist_ok = True ) def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists () def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )] fmt : str = 'pth' class-attribute override : bool = False class-attribute root : Path = Path ( '/tmp/glasses' ) class-attribute __post_init__ () Source code in glasses/storage/local/__init__.py 18 19 def __post_init__ ( self ): self . root . mkdir ( exist_ok = True ) get ( key ) Source code in glasses/storage/local/__init__.py 34 35 36 37 38 39 40 41 def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config models () property Source code in glasses/storage/local/__init__.py 43 44 45 @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )] put ( key , state_dict , config ) Source code in glasses/storage/local/__init__.py 21 22 23 24 25 26 27 28 29 30 31 32 def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists ()","title":"local"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage","text":"Bases: Storage Source code in glasses/storage/local/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 @dataclass class LocalStorage ( Storage ): root : Path = Path ( \"/tmp/glasses\" ) override : bool = False fmt : str = \"pth\" def __post_init__ ( self ): self . root . mkdir ( exist_ok = True ) def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists () def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )]","title":"LocalStorage"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.fmt","text":"","title":"fmt"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.override","text":"","title":"override"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.root","text":"","title":"root"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.__post_init__","text":"Source code in glasses/storage/local/__init__.py 18 19 def __post_init__ ( self ): self . root . mkdir ( exist_ok = True )","title":"__post_init__()"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.get","text":"Source code in glasses/storage/local/__init__.py 34 35 36 37 38 39 40 41 def get ( self , key : str ) -> Tuple [ StateDict , Config ]: save_dir = self . root / Path ( key ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" state_dict = torch . load ( model_save_path ) with open ( config_save_path , \"r\" ) as f : config = json . load ( f ) return state_dict , config","title":"get()"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.models","text":"Source code in glasses/storage/local/__init__.py 43 44 45 @property def models ( self ) -> List [ str ]: return [ file . stem for file in self . root . glob ( f \"*. { self . fmt } \" )]","title":"models()"},{"location":"reference/storage/local/#glasses.storage.local.LocalStorage.put","text":"Source code in glasses/storage/local/__init__.py 21 22 23 24 25 26 27 28 29 30 31 32 def put ( self , key : str , state_dict : StateDict , config : Dict ): save_dir = self . root / Path ( key ) save_dir . mkdir ( exist_ok = True ) model_save_path = save_dir / f \"model. { self . fmt } \" config_save_path = save_dir / f \"config.json\" if key not in self or self . override : torch . save ( state_dict , model_save_path ) with open ( config_save_path , \"w\" ) as f : json . dump ( config , f ) assert model_save_path . exists () assert config_save_path . exists ()","title":"put()"},{"location":"reference/tests/test_foo/","text":"test_foo () Source code in glasses/tests/test_foo.py 1 2 def test_foo (): assert False","title":"test_foo"},{"location":"reference/tests/test_foo/#glasses.tests.test_foo.test_foo","text":"Source code in glasses/tests/test_foo.py 1 2 def test_foo (): assert False","title":"test_foo()"}]}